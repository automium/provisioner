resource "openstack_networking_secgroup_v2" "per_host_securitygroups" {
  name = "{{ IDENTITY }}-${count.index}"
  description ="Created automatically - Security group for {{ IDENTITY }}-${count.index} instance"
  delete_default_rules = true
  region = "${var.os_region}"
  count = "${var.quantity}"

  lifecycle {
    ignore_changes = ["*"]
  }
}

{%- if NETWORK_SECURITY_PORTS is defined and NETWORK_SECURITY_PORTS.split(",")|length -%}
{%- set configured_rules = NETWORK_SECURITY_PORTS.split(",")|length -%}
{% else %}
{%- set configured_rules = 0 -%}
{%- endif -%}
{%- for n in range(10) -%}
{% if configured_rules > 0 and configured_rules >= loop.index -%}
{% set network_security_port = NETWORK_SECURITY_PORTS.split(",")[loop.index0] -%}
{%- if "-" in network_security_port -%}
{%- set port_range_min = network_security_port.split("-")[0] -%}
{% set port_range_max = network_security_port.split("-")[1] -%}
{% set remote_ip_prefix = "0.0.0.0/0" -%}
{%- else %}
{%- set port_range_min = network_security_port -%}
{% set port_range_max = network_security_port -%}
{% set remote_ip_prefix = "0.0.0.0/0" -%}
{% endif %}
{% else %}
{%- set port_range_min = loop.index -%}
{% set port_range_max = loop.index -%}
{% set remote_ip_prefix = "127.0.0.1/32" -%}
{% endif %}

resource "openstack_networking_secgroup_rule_v2" "per_securitygroup_rules_tcp_{{ loop.index0 }}" {
  region = "${var.os_region}"
  direction = "ingress"
  ethertype = "IPv4"
  protocol = "tcp"
  port_range_min = "{{ port_range_min }}"
  port_range_max = "{{ port_range_max }}"
  remote_ip_prefix = "{{ remote_ip_prefix }}"
  security_group_id = "${openstack_networking_secgroup_v2.per_host_securitygroups.*.id[count.index]}"
  count = "${var.quantity}"

  lifecycle {
    ignore_changes = ["*"]
  }
}

resource "openstack_networking_secgroup_rule_v2" "per_securitygroup_rules_udp_{{ loop.index0 }}" {
  region = "${var.os_region}"
  direction = "ingress"
  ethertype = "IPv4"
  protocol = "udp"
  port_range_min = "{{ port_range_min }}"
  port_range_max = "{{ port_range_max }}"
  remote_ip_prefix = "{{ remote_ip_prefix }}"
  security_group_id = "${openstack_networking_secgroup_v2.per_host_securitygroups.*.id[count.index]}"
  count = "${var.quantity}"

  lifecycle {
    ignore_changes = ["*"]
  }
}

{%- endfor %}

data "openstack_networking_network_v2" "network" {
  name = "${var.os_network_name}"
  region = "${var.os_region}"
}

data "openstack_networking_subnet_v2" "subnet" {
  network_id = "${data.openstack_networking_network_v2.network.id}"
  region = "${var.os_region}"
}

module "internal" {
  source = "github.com/automium/terraform-modules//openstack/security?ref=1.0.17"
  name = "internal"
  region = "${var.os_region}"
  protocol = ""
  allow_remote = "${data.openstack_networking_subnet_v2.subnet.cidr}"
}

module "instance" {
  source = "github.com/automium/terraform-modules//openstack/instance?ref=1.0.17"
  name = "${var.cluster_name == "" ? "${var.name}" : "${var.cluster_name}-${var.name}"}"
  region = "${var.os_region}"
  availability_zones = "${var.availability_zones}"
  image = "${var.image}"
  quantity = "${var.quantity}"
  discovery = "false"
  flavor = "${var.flavor}"
  network_name = "${var.os_network_name}"
  sec_group_per_instance = "${openstack_networking_secgroup_v2.per_host_securitygroups.*.id}"
  sec_group = ["${module.internal.sg_id}"]
  keypair = "${var.keypair_name}"
  allowed_address_pairs = "0.0.0.0/0"
  userdata = "${data.template_file.cloud-config.*.rendered}"
  postdestroy = "${data.template_file.cleanup.rendered}"
  auth_url = "${var.os_auth_url}"
  tenant_name = "${var.os_tenant_name}"
  user_name = "${var.os_user_name}"
  password = "${var.os_password}"
  server_group_policy = "${var.server_group_policy}"
}

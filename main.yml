#cloud-config

write_files:
  - content: |
      - name: prerequisite
        hosts: 127.0.0.1
        pre_tasks:
        - name: set false all var
          set_fact:
            etcd: false
            master: false
            node: false
          set_fact:
            etcd: "{{ lookup('env','etcd') }}"
            master:  "{{ lookup('env','master') }}"
            node: "{{ lookup('env','node') }}"  
        - name: render consul service
          set_fact:
            consul_template_render: | 
              - name: "{{ lookup('env','name') }}"
              {% if etcd is sameas true %}
              - name: "{{ lookup('env','name') }}-etcd"
                checks:
                  - args: ["etcdctl", "--ca-file=/etc/ssl/etcd/ssl/ca.pem", "--cert-file=/etc/ssl/etcd/ssl/member-{{ ansible_hostname }}.pem", "--key-file=/etc/ssl/etcd/ssl/member-{{ ansible_hostname }}-key.pem", "--endpoint=https://127.0.0.1:2379", "cluster-health", "|", "grep", "{{ ansible_default_ipv4['address']  }}", "|", "grep", "healthy"]
                    interval: "10s"
              {% endif %}
              {% if master is sameas true %}
              - name: "{{ lookup('env','name') }}-kube-master"
                checks:
                  - args: ["/opt/consul/chek_node.sh"]
                    interval: "30s"
              {% endif %}
              {% if node is sameas true %}
              - name: "{{ lookup('env','name') }}-kube-node"
              {% endif %}
        - name: convert from string to object
          set_fact: 
            consul_template: "{{  consul_template_render | from_yaml }}"
            
        roles:
          - role: entercloudsuite.consul
            consul_config_validate: "{{ consul_user_home }}/bin/consul validate -config-format=json %s"
            consul_configs:
              main:
                bind_addr: "{{ ansible_default_ipv4['address'] }}"
                client_addr: 0.0.0.0
                node_name: "{{ ansible_hostname }}"
                data_dir: "{{ consul_data_dir }}"
                encrypt: "{{ lookup('env','consul_encrypt') }}"
                datacenter: "{{ lookup('env','consul_datacenter') }}"
                enable_syslog: true
                server: false
                ui: true
                enable_script_checks: true
                services: "{{consul_template}}"
                rejoin_after_leave: true
                retry_join:
                  - "{{ lookup('env','consul') }}"
        tasks:
          - service: name=consul state=restarted
          - name: render consul_check.sh
            set_fact:
              consul_check_sh: |
                #!/bin/bash
                status="$(kubectl --kubeconfig /root/.kube/config get nodes {{ansible_hostname}} | awk 'NR > 1' | awk '{print $2}')"
                echo $status
                if [[ $status == "NotReady" ]]; then
                 echo "Node $HOSTNAME dead"
                 exit 1
                elif [[ $status == "Ready" ]]; then
                 echo "Node is OK"
                 exit 0
                else
                  echo not found
                  exit 1
                fi
          - name: Create Consul
            copy:
              content: "{{ consul_check_sh }}"
              dest: /opt/consul/chek_node.sh
              owner: consul
              group: consul
              mode: 0500
              backup: yes
  
    path: /usr/src/cloud/playbook.yml
    permissions: '0400'

runcmd:
  - |
      bash <<'EOF'
      # Define all config file as bash vars
      wget https://github.com/kvz/json2hcl/releases/download/v0.0.6/json2hcl_v0.0.6_linux_amd64 -O /usr/local/bin/json2hcl
      chmod +x /usr/local/bin/json2hcl
      eval $(
      cat << EOC | json2hcl -reverse | jq -r '.variable[] | keys[] as $k | "export \($k)=\(.[$k][].default)"'
      ${config}
      EOC
      )

      if [ "$cluster_name" ]; then
        export name=$${cluster_name}-$${name}
      fi

      export number=${number}

      # Run main playbook
      export COMPLETED=false
      while [ "$COMPLETED" == "false" ]; do
        (
          cd /usr/src/cloud
          source venv/bin/activate
          export HOME=/root
          ansible-playbook -e ansible_python_interpreter=/usr/bin/python --connection=local playbook.yml
          git clone https://github.com/kubernetes-sigs/kubespray
          cd kubespray
          cp -ra inventory/sample inventory/mycluster
          cat << EOI > inventory/mycluster/hosts.ini
      [all]
      spray-0 ansible_host=spray-0.node.automium.consul etcd_member_name=etcd1
      spray-1 ansible_host=spray-1.node.automium.consul etcd_member_name=etcd2
      spray-2 ansible_host=spray-2.node.automium.consul etcd_member_name=etcd3

      [kube-master]
      spray-0
      spray-1
      spray-2

      [etcd]
      spray-0
      spray-1
      spray-2

      [kube-node]
      spray-0
      spray-1
      spray-2

      [k8s-cluster:children]
      kube-master
      kube-node
      EOI

          cat << EOA > ansible.cfg
      [ssh_connection]
      pipelining=True
      ssh_args = -o StrictHostKeyChecking=no -o ControlMaster=auto -o ControlPersist=30m -o ConnectionAttempts=100 -o UserKnownHostsFile=/dev/null
      #control_path = ~/.ssh/ansible-%%r@%%h:%%p
      [defaults]
      strategy_plugins = plugins/mitogen/ansible_mitogen/plugins/strategy

      host_key_checking=False
      gathering = smart
      fact_caching = jsonfile
      fact_caching_connection = /tmp
      stdout_callback = skippy
      library = ./library
      callback_whitelist = profile_tasks
      roles_path = roles:$VIRTUAL_ENV/usr/local/share/kubespray/roles:$VIRTUAL_ENV/usr/local/share/ansible/roles:/usr/share/kubespray/roles
      deprecation_warnings=False
      inventory_ignore_extensions = ~, .orig, .bak, .ini, .cfg, .retry, .pyc, .pyo, .creds
      [inventory]
      ignore_patterns = artifacts, credentials
      EOA

          mkdir callback_plugins
          pip install -r requirements.txt
          #ansible-playbook -i inventory/mycluster/hosts.ini cluster.yml --limit $${name}-$${number} -e ansible_python_interpreter=/usr/bin/python --connection=local

        ) >> /var/log/cloud-scripts.log 2>&1
        if [ $? == 0 ]; then
          COMPLETED=true
        fi
        sleep 1
      done
      export COMPLETED=false
      EOF
